package javase;

/**
 * 线程安全的理解
 * 当多个线程访问一个对象时，如果不用进行额外的同步控制或其他的协调操作，调用这个
 * 对象的行为都可以获得正确的结果，我们就说这个对象是线程安全的。
 *
 * 如何做到线程安全？
 * 方法很多，在源码中常见的方式是，采用sync关键字给代码块加锁或者方法加锁，比如StringBuilder
 *
 *
 * 那么，我们开发中，如果需要拼接字符串，使用StringBuilder还是StringBuffer？
 *
 * 场景一：
 * 如果是多个线程访问同一个资源，那么就需要上锁，才能保证数据的安全性。
 * 这个时候如果使用的是非线程安全的对象，比如StringBuilder，那么就需要借助外力，给他加synchronized关键字。或者直接使用线程安全的对象StringBuffer

 * 场景二：
 * 如果每个线程访问的是各自的资源，那么就不需要考虑线程安全的问题，所以这个时候，我们可以放心使用非线程安全的对象，比如StringBuilder
 * 比如在方法中，创建对象，来实现字符串的拼接。
 * 看场景，如果我们是在方法中使用，那么建议在方法中创建StringBuilder，这时候相当是每个线程独立占有一个StringBuilder对象，不存在多线程共享一个资源的情况，所以我们可以安心使用，虽然StringBuilder本身不是线程安全的。
 *
 * 什么时候需要考虑线程安全？
 * 1，多个线程访问同一个资源
 * 2，资源是有状态的，比如我们上述讲的字符串拼接，这个时候数据是会有变化的
 * @author 路飞
 * @create 2021/3/2 9:52
 */
public class Test28 {
}
